#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.0 on 2011-07-19 18:50:01.

module AdwordsApi; module V13; module ReportService
  class ReportServiceRegistry
    REPORTSERVICE_METHODS = {:schedule_report_job=>{:input=>[{:type=>"ReportJob", :name=>:job}], :output=>{:fields=>[{:type=>"long", :name=>:schedule_report_job_return}], :name=>"schedule_report_job_response"}}, :validate_report_job=>{:input=>[{:type=>"ReportJob", :name=>:job}], :output=>{:fields=>[], :name=>"validate_report_job_response"}}, :get_report_job_status=>{:input=>[{:type=>"long", :name=>:report_job_id}], :output=>{:fields=>[{:type=>"ReportJobStatus", :name=>:get_report_job_status_return}], :name=>"get_report_job_status_response"}}, :delete_report=>{:input=>[{:type=>"long", :name=>:report_job_id}], :output=>{:fields=>[], :name=>"delete_report_response"}}, :get_all_jobs=>{:input=>[], :output=>{:fields=>[{:type=>"ReportJob", :max_occurs=>:unbounded, :name=>:get_all_jobs_return}], :name=>"get_all_jobs_response"}}, :get_report_download_url=>{:input=>[{:type=>"long", :name=>:report_job_id}], :output=>{:fields=>[{:type=>"string", :name=>:get_report_download_url_return}], :name=>"get_report_download_url_response"}}, :get_gzip_report_download_url=>{:input=>[{:type=>"long", :name=>:report_job_id}], :output=>{:fields=>[{:type=>"string", :name=>:get_gzip_report_download_url_return}], :name=>"get_gzip_report_download_url_response"}}}
    REPORTSERVICE_TYPES = {:DefinedReportJob=>{:fields=>[{:type=>"AdGroupStatus", :max_occurs=>:unbounded, :name=>:ad_group_statuses, :min_occurs=>0}, {:type=>"long", :max_occurs=>:unbounded, :name=>:ad_groups, :min_occurs=>0}, {:type=>"AdWordsType", :name=>:ad_words_type, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:aggregation_types, :min_occurs=>0}, {:type=>"CampaignStatus", :max_occurs=>:unbounded, :name=>:campaign_statuses, :min_occurs=>0}, {:type=>"int", :max_occurs=>:unbounded, :name=>:campaigns, :min_occurs=>0}, {:type=>"boolean", :name=>:include_zero_impression, :min_occurs=>0}, {:type=>"KeywordStatus", :max_occurs=>:unbounded, :name=>:keyword_statuses, :min_occurs=>0}, {:type=>"KeywordType", :name=>:keyword_type, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:keywords, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:selected_columns, :min_occurs=>0}, {:type=>"string", :name=>:selected_report_type}], :base=>"ReportJob"}, :ReportJob=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :name=>:client_emails, :min_occurs=>0}, {:type=>"boolean", :name=>:cross_client, :min_occurs=>0}, {:type=>"date", :name=>:end_day}, {:type=>"long", :name=>:id, :min_occurs=>0}, {:type=>"string", :name=>:name, :min_occurs=>0}, {:type=>"date", :name=>:start_day}, {:type=>"ReportJobStatus", :name=>:status, :min_occurs=>0}], :abstract=>true}}
    REPORTSERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return REPORTSERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return REPORTSERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return REPORTSERVICE_NAMESPACES[index]
    end
  end

  class ApiException < AdwordsApi::Errors::ApiException
    attr_reader :code  # int
    attr_reader :errors  # ApiError
    attr_reader :internal  # boolean
    attr_reader :message  # string
    attr_reader :trigger  # string
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
