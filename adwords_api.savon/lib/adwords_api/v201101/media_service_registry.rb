#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.0 on 2011-07-19 18:47:16.

module AdwordsApi; module V201101; module MediaService
  class MediaServiceRegistry
    MEDIASERVICE_METHODS = {:get=>{:input=>[{:type=>"Selector", :max_occurs=>1, :name=>:service_selector, :min_occurs=>0}], :output=>{:fields=>[{:type=>"MediaPage", :max_occurs=>1, :name=>:rval, :min_occurs=>0}], :name=>"get_response"}}, :upload=>{:input=>[{:type=>"Media", :max_occurs=>:unbounded, :name=>:media, :min_occurs=>0}], :output=>{:fields=>[{:type=>"Media", :max_occurs=>:unbounded, :name=>:rval, :min_occurs=>0}], :name=>"upload_response"}}}
    MEDIASERVICE_TYPES = {:MediaPage=>{:fields=>[{:type=>"Media", :max_occurs=>:unbounded, :name=>:entries, :min_occurs=>0}, {:type=>"int", :max_occurs=>1, :name=>:total_num_entries, :min_occurs=>0}]}, :Video=>{:fields=>[{:type=>"long", :max_occurs=>1, :name=>:duration_millis, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:streaming_url, :min_occurs=>0}, {:type=>"boolean", :max_occurs=>1, :name=>:ready_to_play_on_the_web, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:industry_standard_commercial_identifier, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:advertising_id, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:you_tube_video_id_string, :min_occurs=>0}], :base=>"Media"}, :Audio=>{:fields=>[{:type=>"long", :max_occurs=>1, :name=>:duration_millis, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:streaming_url, :min_occurs=>0}, {:type=>"boolean", :max_occurs=>1, :name=>:ready_to_play_on_the_web, :min_occurs=>0}], :base=>"Media"}, :EntityNotFound=>{:fields=>[{:type=>"EntityNotFound.Reason", :max_occurs=>1, :name=>:reason, :min_occurs=>0}], :base=>"ApiError"}, :Predicate=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:field, :min_occurs=>0}, {:type=>"Predicate.Operator", :max_occurs=>1, :name=>:operator, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:values, :min_occurs=>0}]}, :OperationAccessDenied=>{:fields=>[{:type=>"OperationAccessDenied.Reason", :max_occurs=>1, :name=>:reason, :min_occurs=>0}], :base=>"ApiError"}, :Dimensions=>{:fields=>[{:type=>"int", :max_occurs=>1, :name=>:width, :min_occurs=>0}, {:type=>"int", :max_occurs=>1, :name=>:height, :min_occurs=>0}]}, :SoapHeader=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:auth_token, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:client_customer_id, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:client_email, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:developer_token, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:user_agent, :min_occurs=>0}, {:type=>"boolean", :max_occurs=>1, :name=>:validate_only, :min_occurs=>0}, {:type=>"boolean", :max_occurs=>1, :name=>:partial_failure, :min_occurs=>0}]}, :Selector=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :name=>:fields, :min_occurs=>0}, {:type=>"Predicate", :max_occurs=>:unbounded, :name=>:predicates, :min_occurs=>0}, {:type=>"DateRange", :max_occurs=>1, :name=>:date_range, :min_occurs=>0}, {:type=>"OrderBy", :max_occurs=>:unbounded, :name=>:ordering, :min_occurs=>0}, {:type=>"Paging", :max_occurs=>1, :name=>:paging, :min_occurs=>0}]}, :OrderBy=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:field, :min_occurs=>0}, {:type=>"SortOrder", :max_occurs=>1, :name=>:sort_order, :min_occurs=>0}]}, :Image=>{:fields=>[{:type=>"base64Binary", :max_occurs=>1, :name=>:data, :min_occurs=>0}], :base=>"Media"}, :SoapResponseHeader=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:request_id, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:operations, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:response_time, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:units, :min_occurs=>0}]}, :Media=>{:fields=>[{:type=>"long", :max_occurs=>1, :name=>:media_id, :min_occurs=>0}, {:type=>"Media.MediaType", :max_occurs=>1, :name=>:type, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:reference_id, :min_occurs=>0}, {:type=>"Media_Size_DimensionsMapEntry", :max_occurs=>:unbounded, :name=>:dimensions, :min_occurs=>0}, {:type=>"Media_Size_StringMapEntry", :max_occurs=>:unbounded, :name=>:urls, :min_occurs=>0}, {:type=>"Media.MimeType", :max_occurs=>1, :name=>:mime_type, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:source_url, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:name, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:file_size, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:creation_time, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:media_type, :min_occurs=>0}]}, :Paging=>{:fields=>[{:type=>"int", :max_occurs=>1, :name=>:start_index, :min_occurs=>0}, {:type=>"int", :max_occurs=>1, :name=>:number_results, :min_occurs=>0}]}, :Media_Size_DimensionsMapEntry=>{:fields=>[{:type=>"Media.Size", :max_occurs=>1, :name=>:key, :min_occurs=>0}, {:type=>"Dimensions", :max_occurs=>1, :name=>:value, :min_occurs=>0}]}, :DateRange=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:min, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:max, :min_occurs=>0}]}, :Media_Size_StringMapEntry=>{:fields=>[{:type=>"Media.Size", :max_occurs=>1, :name=>:key, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:value, :min_occurs=>0}]}}
    MEDIASERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return MEDIASERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return MEDIASERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return MEDIASERVICE_NAMESPACES[index]
    end
  end

  # Base class for exceptions.
  class ApplicationException < AdwordsApi::Errors::ApiException
    attr_reader :message  # string
    attr_reader :application_exception_type  # string
  end

  # Exception class for holding a list of service errors.
  class ApiException < ApplicationException
    attr_reader :errors  # ApiError
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
