#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.1 on 2011-09-21 12:00:43.

require 'adwords_api/errors'

module AdwordsApi; module V13; module ReportService
  class ReportServiceRegistry
    REPORTSERVICE_METHODS = {:validate_report_job=>{:output=>{:fields=>[], :name=>"validate_report_job_response"}, :input=>[{:type=>"ReportJob", :name=>:job}]}, :get_report_job_status=>{:output=>{:fields=>[{:type=>"ReportJobStatus", :name=>:get_report_job_status_return}], :name=>"get_report_job_status_response"}, :input=>[{:type=>"long", :name=>:report_job_id}]}, :delete_report=>{:output=>{:fields=>[], :name=>"delete_report_response"}, :input=>[{:type=>"long", :name=>:report_job_id}]}, :get_all_jobs=>{:output=>{:fields=>[{:type=>"ReportJob", :max_occurs=>:unbounded, :name=>:get_all_jobs_return}], :name=>"get_all_jobs_response"}, :input=>[]}, :get_report_download_url=>{:output=>{:fields=>[{:type=>"string", :name=>:get_report_download_url_return}], :name=>"get_report_download_url_response"}, :input=>[{:type=>"long", :name=>:report_job_id}]}, :get_gzip_report_download_url=>{:output=>{:fields=>[{:type=>"string", :name=>:get_gzip_report_download_url_return}], :name=>"get_gzip_report_download_url_response"}, :input=>[{:type=>"long", :name=>:report_job_id}]}, :schedule_report_job=>{:output=>{:fields=>[{:type=>"long", :name=>:schedule_report_job_return}], :name=>"schedule_report_job_response"}, :input=>[{:type=>"ReportJob", :name=>:job}]}}
    REPORTSERVICE_TYPES = {:DefinedReportJob=>{:fields=>[{:type=>"AdGroupStatus", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:ad_group_statuses}, {:type=>"long", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:ad_groups}, {:type=>"AdWordsType", :min_occurs=>0, :name=>:ad_words_type}, {:type=>"string", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:aggregation_types}, {:type=>"CampaignStatus", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:campaign_statuses}, {:type=>"int", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:campaigns}, {:type=>"boolean", :min_occurs=>0, :name=>:include_zero_impression}, {:type=>"KeywordStatus", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:keyword_statuses}, {:type=>"KeywordType", :min_occurs=>0, :name=>:keyword_type}, {:type=>"string", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:keywords}, {:type=>"string", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:selected_columns}, {:type=>"string", :name=>:selected_report_type}], :base=>"ReportJob"}, :ReportJob=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:client_emails}, {:type=>"boolean", :min_occurs=>0, :name=>:cross_client}, {:type=>"date", :name=>:end_day}, {:type=>"long", :min_occurs=>0, :name=>:id}, {:type=>"string", :min_occurs=>0, :name=>:name}, {:type=>"date", :name=>:start_day}, {:type=>"ReportJobStatus", :min_occurs=>0, :name=>:status}], :abstract=>true}}
    REPORTSERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return REPORTSERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return REPORTSERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return REPORTSERVICE_NAMESPACES[index]
    end
  end

  class ApiException < AdwordsApi::Errors::ApiException
    attr_reader :code  # int
    attr_reader :errors  # ApiError
    attr_reader :internal  # boolean
    attr_reader :message  # string
    attr_reader :trigger  # string
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
