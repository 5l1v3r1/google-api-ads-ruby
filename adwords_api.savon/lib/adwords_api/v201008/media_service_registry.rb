#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.1 on 2011-09-21 12:00:28.

require 'adwords_api/errors'

module AdwordsApi; module V201008; module MediaService
  class MediaServiceRegistry
    MEDIASERVICE_METHODS = {:upload=>{:output=>{:fields=>[{:type=>"Media", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:rval}], :name=>"upload_response"}, :input=>[{:type=>"Media", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:media}]}, :get=>{:output=>{:fields=>[{:type=>"MediaPage", :min_occurs=>0, :max_occurs=>1, :name=>:rval}], :name=>"get_response"}, :input=>[{:type=>"MediaSelector", :min_occurs=>0, :max_occurs=>1, :name=>:selector}]}}
    MEDIASERVICE_TYPES = {:EntityNotFound=>{:fields=>[{:type=>"EntityNotFound.Reason", :min_occurs=>0, :max_occurs=>1, :name=>:reason}], :base=>"ApiError"}, :MediaSelector=>{:fields=>[{:type=>"Media.MediaType", :min_occurs=>0, :max_occurs=>1, :name=>:media_type}, {:type=>"long", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:media_ids}, {:type=>"long", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:media_reference_ids}, {:type=>"string", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:you_tube_video_ids}, {:type=>"Dimensions", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:media_dimensions}, {:type=>"Media.MediaExtendedCapabilityState", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:extended_capability_states}, {:type=>"Media.MimeType", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:mime_types}]}, :Dimensions=>{:fields=>[{:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:width}, {:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:height}]}, :OperationAccessDenied=>{:fields=>[{:type=>"OperationAccessDenied.Reason", :min_occurs=>0, :max_occurs=>1, :name=>:reason}], :base=>"ApiError"}, :Image=>{:fields=>[{:type=>"base64Binary", :min_occurs=>0, :max_occurs=>1, :name=>:data}], :base=>"Media"}, :SoapHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:auth_token}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:client_customer_id}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:client_email}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:developer_token}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:user_agent}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:validate_only}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:partial_failure}]}, :Media=>{:fields=>[{:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:media_id}, {:type=>"Media.MediaType", :min_occurs=>0, :max_occurs=>1, :name=>:type}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:reference_id}, {:type=>"Media_Size_DimensionsMapEntry", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:dimensions}, {:type=>"Media_Size_StringMapEntry", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:urls}, {:type=>"Media.MimeType", :min_occurs=>0, :max_occurs=>1, :name=>:mime_type}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:source_url}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:name}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:file_size}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:creation_time}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:media_type}]}, :Media_Size_DimensionsMapEntry=>{:fields=>[{:type=>"Media.Size", :min_occurs=>0, :max_occurs=>1, :name=>:key}, {:type=>"Dimensions", :min_occurs=>0, :max_occurs=>1, :name=>:value}]}, :SoapResponseHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:request_id}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:operations}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:response_time}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:units}]}, :Media_Size_StringMapEntry=>{:fields=>[{:type=>"Media.Size", :min_occurs=>0, :max_occurs=>1, :name=>:key}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:value}]}, :MediaPage=>{:fields=>[{:type=>"Media", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:entries}, {:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:total_num_entries}]}, :Video=>{:fields=>[{:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:duration_millis}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:streaming_url}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:ready_to_play_on_the_web}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:industry_standard_commercial_identifier}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:advertising_id}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:you_tube_video_id_string}], :base=>"Media"}, :Audio=>{:fields=>[{:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:duration_millis}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:streaming_url}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:ready_to_play_on_the_web}], :base=>"Media"}}
    MEDIASERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return MEDIASERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return MEDIASERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return MEDIASERVICE_NAMESPACES[index]
    end
  end

  # Base class for exceptions.
  class ApplicationException < AdwordsApi::Errors::ApiException
    attr_reader :message  # string
    attr_reader :application_exception_type  # string
  end

  # Exception class for holding a list of service errors.
  class ApiException < ApplicationException
    attr_reader :errors  # ApiError
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
