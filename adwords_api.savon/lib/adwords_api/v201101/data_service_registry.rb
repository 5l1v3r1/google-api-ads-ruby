#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.1 on 2011-09-21 11:58:03.

require 'adwords_api/errors'

module AdwordsApi; module V201101; module DataService
  class DataServiceRegistry
    DATASERVICE_METHODS = {:get_ad_group_bid_landscape=>{:output=>{:fields=>[{:type=>"AdGroupBidLandscapePage", :min_occurs=>0, :max_occurs=>1, :name=>:rval}], :name=>"get_ad_group_bid_landscape_response"}, :input=>[{:type=>"Selector", :min_occurs=>0, :max_occurs=>1, :name=>:service_selector}]}, :get_criterion_bid_landscape=>{:output=>{:fields=>[{:type=>"CriterionBidLandscapePage", :min_occurs=>0, :max_occurs=>1, :name=>:rval}], :name=>"get_criterion_bid_landscape_response"}, :input=>[{:type=>"Selector", :min_occurs=>0, :max_occurs=>1, :name=>:service_selector}]}}
    DATASERVICE_TYPES = {:BidLandscape=>{:fields=>[{:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:campaign_id}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:ad_group_id}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:start_date}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:end_date}, {:type=>"BidLandscape.LandscapePoint", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:landscape_points}], :base=>"DataEntry", :abstract=>true}, :DoubleValue=>{:fields=>[{:type=>"double", :min_occurs=>0, :max_occurs=>1, :name=>:number}], :base=>"NumberValue"}, :Predicate=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:field}, {:type=>"Predicate.Operator", :min_occurs=>0, :max_occurs=>1, :name=>:operator}, {:type=>"string", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:values}]}, :Money=>{:fields=>[{:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:micro_amount}], :base=>"ComparableValue"}, :AdGroupBidLandscapePage=>{:fields=>[{:type=>"AdGroupBidLandscape", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:entries}], :base=>"NoStatsPage"}, :DataEntry=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:data_entry_type}], :abstract=>true}, :NumberValue=>{:fields=>[], :base=>"ComparableValue", :abstract=>true}, :CriterionBidLandscapePage=>{:fields=>[{:type=>"CriterionBidLandscape", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:entries}], :base=>"NoStatsPage"}, :Page=>{:fields=>[{:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:total_num_entries}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:page_type}], :abstract=>true}, :NoStatsPage=>{:fields=>[], :base=>"Page", :abstract=>true}, :SoapHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:auth_token}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:client_customer_id}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:client_email}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:developer_token}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:user_agent}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:validate_only}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:partial_failure}]}, :CriterionBidLandscape=>{:fields=>[{:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:criterion_id}], :base=>"BidLandscape"}, :Selector=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:fields}, {:type=>"Predicate", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:predicates}, {:type=>"DateRange", :min_occurs=>0, :max_occurs=>1, :name=>:date_range}, {:type=>"OrderBy", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:ordering}, {:type=>"Paging", :min_occurs=>0, :max_occurs=>1, :name=>:paging}]}, :OrderBy=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:field}, {:type=>"SortOrder", :min_occurs=>0, :max_occurs=>1, :name=>:sort_order}]}, :"BidLandscape.LandscapePoint"=>{:fields=>[{:type=>"Money", :min_occurs=>0, :max_occurs=>1, :name=>:bid}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:clicks}, {:type=>"Money", :min_occurs=>0, :max_occurs=>1, :name=>:cost}, {:type=>"Money", :min_occurs=>0, :max_occurs=>1, :name=>:marginal_cpc}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:impressions}]}, :SoapResponseHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:request_id}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:operations}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:response_time}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:units}]}, :LongValue=>{:fields=>[{:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:number}], :base=>"NumberValue"}, :Paging=>{:fields=>[{:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:start_index}, {:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:number_results}]}, :DateRange=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:min}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:max}]}, :AdGroupBidLandscape=>{:fields=>[{:type=>"AdGroupBidLandscape.Type", :min_occurs=>0, :max_occurs=>1, :name=>:type}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:landscape_current}], :base=>"BidLandscape"}, :ComparableValue=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:comparable_value_type}], :abstract=>true}}
    DATASERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return DATASERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return DATASERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return DATASERVICE_NAMESPACES[index]
    end
  end

  # Base class for exceptions.
  class ApplicationException < AdwordsApi::Errors::ApiException
    attr_reader :message  # string
    attr_reader :application_exception_type  # string
  end

  # Exception class for holding a list of service errors.
  class ApiException < ApplicationException
    attr_reader :errors  # ApiError
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
