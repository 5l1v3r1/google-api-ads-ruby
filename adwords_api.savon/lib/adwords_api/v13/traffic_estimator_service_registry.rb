#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.0 on 2011-07-19 18:50:04.

module AdwordsApi; module V13; module TrafficEstimatorService
  class TrafficEstimatorServiceRegistry
    TRAFFICESTIMATORSERVICE_METHODS = {:check_keyword_traffic=>{:input=>[{:type=>"KeywordTrafficRequest", :max_occurs=>:unbounded, :name=>:requests}], :output=>{:fields=>[{:type=>"KeywordTraffic", :max_occurs=>:unbounded, :name=>:check_keyword_traffic_return}], :name=>"check_keyword_traffic_response"}}, :estimate_ad_group_list=>{:input=>[{:type=>"AdGroupRequest", :max_occurs=>:unbounded, :name=>:ad_group_requests}], :output=>{:fields=>[{:type=>"AdGroupEstimate", :max_occurs=>:unbounded, :name=>:estimate_ad_group_list_return}], :name=>"estimate_ad_group_list_response"}}, :estimate_campaign_list=>{:input=>[{:type=>"CampaignRequest", :max_occurs=>:unbounded, :name=>:campaign_requests}], :output=>{:fields=>[{:type=>"CampaignEstimate", :max_occurs=>:unbounded, :name=>:estimate_campaign_list_return}], :name=>"estimate_campaign_list_response"}}, :estimate_keyword_list=>{:input=>[{:type=>"KeywordRequest", :max_occurs=>:unbounded, :name=>:keyword_requests}], :output=>{:fields=>[{:type=>"KeywordEstimate", :max_occurs=>:unbounded, :name=>:estimate_keyword_list_return}], :name=>"estimate_keyword_list_response"}}}
    TRAFFICESTIMATORSERVICE_TYPES = {:MetroTargets=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :name=>:excluded_metros, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:metros, :min_occurs=>0}]}, :Circle=>{:fields=>[{:type=>"int", :name=>:latitude_micro_degrees}, {:type=>"int", :name=>:longitude_micro_degrees}, {:type=>"int", :name=>:radius_meters}]}, :ProximityTargets=>{:fields=>[{:type=>"Circle", :max_occurs=>:unbounded, :name=>:circles}]}, :NetworkTarget=>{:fields=>[{:type=>"NetworkType", :max_occurs=>:unbounded, :name=>:network_types, :min_occurs=>0}]}, :AdGroupEstimate=>{:fields=>[{:type=>"int", :name=>:id, :min_occurs=>0}, {:type=>"KeywordEstimate", :max_occurs=>:unbounded, :name=>:keyword_estimates}]}, :KeywordEstimate=>{:fields=>[{:type=>"long", :name=>:id, :min_occurs=>0}, {:type=>"float", :name=>:lower_avg_position}, {:type=>"float", :name=>:lower_clicks_per_day}, {:type=>"long", :name=>:lower_cpc}, {:type=>"float", :name=>:upper_avg_position}, {:type=>"float", :name=>:upper_clicks_per_day}, {:type=>"long", :name=>:upper_cpc}]}, :CityTargets=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :name=>:cities, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:excluded_cities, :min_occurs=>0}]}, :RegionTargets=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :name=>:excluded_regions, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:regions, :min_occurs=>0}]}, :GeoTarget=>{:fields=>[{:type=>"CityTargets", :name=>:city_targets, :min_occurs=>0}, {:type=>"CountryTargets", :name=>:country_targets, :min_occurs=>0}, {:type=>"MetroTargets", :name=>:metro_targets, :min_occurs=>0}, {:type=>"ProximityTargets", :name=>:proximity_targets, :min_occurs=>0}, {:type=>"RegionTargets", :name=>:region_targets, :min_occurs=>0}, {:type=>"boolean", :name=>:target_all}]}, :CountryTargets=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :name=>:countries, :min_occurs=>0}, {:type=>"string", :max_occurs=>:unbounded, :name=>:excluded_countries, :min_occurs=>0}]}, :LanguageTarget=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :name=>:languages}]}, :CampaignEstimate=>{:fields=>[{:type=>"AdGroupEstimate", :max_occurs=>:unbounded, :name=>:ad_group_estimates}, {:type=>"int", :name=>:id, :min_occurs=>0}]}, :KeywordRequest=>{:fields=>[{:type=>"long", :name=>:id, :min_occurs=>0}, {:type=>"long", :name=>:max_cpc, :min_occurs=>0}, {:type=>"boolean", :name=>:negative, :min_occurs=>0}, {:type=>"string", :name=>:text, :min_occurs=>0}, {:type=>"KeywordType", :name=>:type, :min_occurs=>0}]}, :AdGroupRequest=>{:fields=>[{:type=>"long", :name=>:id, :min_occurs=>0}, {:type=>"KeywordRequest", :max_occurs=>:unbounded, :name=>:keyword_requests}, {:type=>"long", :name=>:max_cpc, :min_occurs=>0}]}, :KeywordTrafficRequest=>{:fields=>[{:type=>"string", :name=>:keyword_text}, {:type=>"KeywordType", :name=>:keyword_type}, {:type=>"string", :name=>:language, :min_occurs=>0}]}, :CampaignRequest=>{:fields=>[{:type=>"AdGroupRequest", :max_occurs=>:unbounded, :name=>:ad_group_requests}, {:type=>"GeoTarget", :name=>:geo_targeting, :min_occurs=>0}, {:type=>"int", :name=>:id, :min_occurs=>0}, {:type=>"LanguageTarget", :name=>:language_targeting, :min_occurs=>0}, {:type=>"NetworkTarget", :name=>:network_targeting, :min_occurs=>0}]}}
    TRAFFICESTIMATORSERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return TRAFFICESTIMATORSERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return TRAFFICESTIMATORSERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return TRAFFICESTIMATORSERVICE_NAMESPACES[index]
    end
  end

  class ApiException < AdwordsApi::Errors::ApiException
    attr_reader :code  # int
    attr_reader :errors  # ApiError
    attr_reader :internal  # boolean
    attr_reader :message  # string
    attr_reader :trigger  # string
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
