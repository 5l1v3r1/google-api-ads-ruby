#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.1 on 2011-09-21 11:58:51.

require 'adwords_api/errors'

module AdwordsApi; module V201101; module GeoLocationService
  class GeoLocationServiceRegistry
    GEOLOCATIONSERVICE_METHODS = {:get=>{:output=>{:fields=>[{:type=>"GeoLocation", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:rval}], :name=>"get_response"}, :input=>[{:type=>"GeoLocationSelector", :min_occurs=>0, :max_occurs=>1, :name=>:selector}]}}
    GEOLOCATIONSERVICE_TYPES = {:GeoPoint=>{:fields=>[{:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:latitude_in_micro_degrees}, {:type=>"int", :min_occurs=>0, :max_occurs=>1, :name=>:longitude_in_micro_degrees}]}, :GeoLocationSelector=>{:fields=>[{:type=>"Address", :min_occurs=>0, :max_occurs=>:unbounded, :name=>:addresses}]}, :Address=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:street_address}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:street_address2}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:city_name}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:province_code}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:province_name}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:postal_code}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:country_code}]}, :SoapHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:auth_token}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:client_customer_id}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:client_email}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:developer_token}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:user_agent}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:validate_only}, {:type=>"boolean", :min_occurs=>0, :max_occurs=>1, :name=>:partial_failure}]}, :InvalidGeoLocation=>{:fields=>[], :base=>"GeoLocation"}, :SoapResponseHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:request_id}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:operations}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:response_time}, {:type=>"long", :min_occurs=>0, :max_occurs=>1, :name=>:units}]}, :GeoLocation=>{:fields=>[{:type=>"GeoPoint", :min_occurs=>0, :max_occurs=>1, :name=>:geo_point}, {:type=>"Address", :min_occurs=>0, :max_occurs=>1, :name=>:address}, {:type=>"base64Binary", :min_occurs=>0, :max_occurs=>1, :name=>:encoded_location}, {:type=>"string", :min_occurs=>0, :max_occurs=>1, :name=>:geo_location_type}]}}
    GEOLOCATIONSERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return GEOLOCATIONSERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return GEOLOCATIONSERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return GEOLOCATIONSERVICE_NAMESPACES[index]
    end
  end

  # Base class for exceptions.
  class ApplicationException < AdwordsApi::Errors::ApiException
    attr_reader :message  # string
    attr_reader :application_exception_type  # string
  end

  # Exception class for holding a list of service errors.
  class ApiException < ApplicationException
    attr_reader :errors  # ApiError
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
