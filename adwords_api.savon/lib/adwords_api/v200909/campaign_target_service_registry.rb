#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.0 on 2011-07-19 18:48:33.

module AdwordsApi; module V200909; module CampaignTargetService
  class CampaignTargetServiceRegistry
    CAMPAIGNTARGETSERVICE_METHODS = {:get=>{:input=>[{:type=>"CampaignTargetSelector", :max_occurs=>1, :name=>:selector, :min_occurs=>0}], :output=>{:fields=>[{:type=>"CampaignTargetPage", :max_occurs=>1, :name=>:rval, :min_occurs=>0}], :name=>"get_response"}}, :mutate=>{:input=>[{:type=>"CampaignTargetOperation", :max_occurs=>:unbounded, :name=>:operations, :min_occurs=>0}], :output=>{:fields=>[{:type=>"CampaignTargetReturnValue", :max_occurs=>1, :name=>:rval, :min_occurs=>0}], :name=>"mutate_response"}}}
    CAMPAIGNTARGETSERVICE_TYPES = {:ListReturnValue=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:list_return_value_type, :min_occurs=>0}], :abstract=>true}, :AdScheduleTargetList=>{:fields=>[{:type=>"AdScheduleTarget", :max_occurs=>:unbounded, :name=>:targets, :min_occurs=>0}], :base=>"TargetList"}, :DemographicTarget=>{:fields=>[{:type=>"int", :max_occurs=>1, :name=>:bid_modifier, :min_occurs=>0}], :abstract=>true, :base=>"Target"}, :ProximityTarget=>{:fields=>[{:type=>"GeoPoint", :max_occurs=>1, :name=>:geo_point, :min_occurs=>0}, {:type=>"ProximityTarget.DistanceUnits", :max_occurs=>1, :name=>:radius_distance_units, :min_occurs=>0}, {:type=>"double", :max_occurs=>1, :name=>:radius_in_units, :min_occurs=>0}, {:type=>"Address", :max_occurs=>1, :name=>:address, :min_occurs=>0}, {:type=>"boolean", :max_occurs=>1, :name=>:allow_service_of_address, :min_occurs=>0}], :base=>"GeoTarget"}, :EntityNotFound=>{:fields=>[{:type=>"EntityNotFound.Reason", :max_occurs=>1, :name=>:reason, :min_occurs=>0}], :base=>"ApiError"}, :Operation=>{:fields=>[{:type=>"Operator", :max_occurs=>1, :name=>:operator, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:operation_type, :min_occurs=>0}], :abstract=>true}, :Target=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:target_type, :min_occurs=>0}], :abstract=>true}, :NetworkTarget=>{:fields=>[{:type=>"NetworkCoverageType", :max_occurs=>1, :name=>:network_coverage_type, :min_occurs=>0}], :base=>"Target"}, :GenderTarget=>{:fields=>[{:type=>"GenderTarget.Gender", :max_occurs=>1, :name=>:gender, :min_occurs=>0}], :base=>"DemographicTarget"}, :CampaignTargetSelector=>{:fields=>[{:type=>"long", :max_occurs=>:unbounded, :name=>:campaign_ids, :min_occurs=>0}]}, :GeoPoint=>{:fields=>[{:type=>"int", :max_occurs=>1, :name=>:latitude_in_micro_degrees, :min_occurs=>0}, {:type=>"int", :max_occurs=>1, :name=>:longitude_in_micro_degrees, :min_occurs=>0}]}, :AdScheduleTarget=>{:fields=>[{:type=>"DayOfWeek", :max_occurs=>1, :name=>:day_of_week, :min_occurs=>0}, {:type=>"int", :max_occurs=>1, :name=>:start_hour, :min_occurs=>0}, {:type=>"MinuteOfHour", :max_occurs=>1, :name=>:start_minute, :min_occurs=>0}, {:type=>"int", :max_occurs=>1, :name=>:end_hour, :min_occurs=>0}, {:type=>"MinuteOfHour", :max_occurs=>1, :name=>:end_minute, :min_occurs=>0}, {:type=>"double", :max_occurs=>1, :name=>:bid_multiplier, :min_occurs=>0}], :base=>"Target"}, :Page=>{:fields=>[{:type=>"int", :max_occurs=>1, :name=>:total_num_entries, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:page_type, :min_occurs=>0}], :abstract=>true}, :GeoTarget=>{:fields=>[{:type=>"boolean", :max_occurs=>1, :name=>:excluded, :min_occurs=>0}], :abstract=>true, :base=>"Target"}, :OperationAccessDenied=>{:fields=>[{:type=>"OperationAccessDenied.Reason", :max_occurs=>1, :name=>:reason, :min_occurs=>0}], :base=>"ApiError"}, :Address=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:street_address, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:street_address2, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:city_name, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:province_code, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:province_name, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:postal_code, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:country_code, :min_occurs=>0}]}, :CampaignTargetPage=>{:fields=>[{:type=>"TargetList", :max_occurs=>:unbounded, :name=>:entries, :min_occurs=>0}], :base=>"Page"}, :GeoTargetList=>{:fields=>[{:type=>"GeoTarget", :max_occurs=>:unbounded, :name=>:targets, :min_occurs=>0}], :base=>"TargetList"}, :SoapHeader=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:application_token, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:auth_token, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:client_customer_id, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:client_email, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:developer_token, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:user_agent, :min_occurs=>0}, {:type=>"boolean", :max_occurs=>1, :name=>:validate_only, :min_occurs=>0}]}, :PlatformTarget=>{:fields=>[{:type=>"PlatformType", :max_occurs=>1, :name=>:platform_type, :min_occurs=>0}], :base=>"Target"}, :AgeTarget=>{:fields=>[{:type=>"AgeTarget.Age", :max_occurs=>1, :name=>:age, :min_occurs=>0}], :base=>"DemographicTarget"}, :CampaignTargetOperation=>{:fields=>[{:type=>"TargetList", :max_occurs=>1, :name=>:operand, :min_occurs=>0}], :base=>"Operation"}, :PlatformTargetList=>{:fields=>[{:type=>"PlatformTarget", :max_occurs=>:unbounded, :name=>:targets, :min_occurs=>0}], :base=>"TargetList"}, :LanguageTarget=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:language_code, :min_occurs=>0}], :base=>"Target"}, :CampaignTargetReturnValue=>{:fields=>[{:type=>"TargetList", :max_occurs=>:unbounded, :name=>:value, :min_occurs=>0}], :base=>"ListReturnValue"}, :SoapResponseHeader=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:request_id, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:operations, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:response_time, :min_occurs=>0}, {:type=>"long", :max_occurs=>1, :name=>:units, :min_occurs=>0}]}, :PolygonTarget=>{:fields=>[{:type=>"GeoPoint", :max_occurs=>:unbounded, :name=>:vertices, :min_occurs=>0}], :base=>"GeoTarget"}, :CityTarget=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:city_name, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:province_code, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:country_code, :min_occurs=>0}], :base=>"GeoTarget"}, :LanguageTargetList=>{:fields=>[{:type=>"LanguageTarget", :max_occurs=>:unbounded, :name=>:targets, :min_occurs=>0}], :base=>"TargetList"}, :MetroTarget=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:metro_code, :min_occurs=>0}], :base=>"GeoTarget"}, :NetworkTargetList=>{:fields=>[{:type=>"NetworkTarget", :max_occurs=>:unbounded, :name=>:targets, :min_occurs=>0}], :base=>"TargetList"}, :ProvinceTarget=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:province_code, :min_occurs=>0}], :base=>"GeoTarget"}, :CountryTarget=>{:fields=>[{:type=>"string", :max_occurs=>1, :name=>:country_code, :min_occurs=>0}], :base=>"GeoTarget"}, :TargetList=>{:fields=>[{:type=>"long", :max_occurs=>1, :name=>:campaign_id, :min_occurs=>0}, {:type=>"string", :max_occurs=>1, :name=>:target_list_type, :min_occurs=>0}], :abstract=>true}, :DemographicTargetList=>{:fields=>[{:type=>"DemographicTarget", :max_occurs=>:unbounded, :name=>:targets, :min_occurs=>0}], :base=>"TargetList"}}
    CAMPAIGNTARGETSERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return CAMPAIGNTARGETSERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return CAMPAIGNTARGETSERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return CAMPAIGNTARGETSERVICE_NAMESPACES[index]
    end
  end

  # Base class for exceptions.
  class ApplicationException < AdwordsApi::Errors::ApiException
    attr_reader :message  # string
    attr_reader :application_exception_type  # string
  end

  # Exception class for holding a list of service errors.
  class ApiException < ApplicationException
    attr_reader :errors  # ApiError
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
